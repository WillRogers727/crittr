.comment{:id => "comment_#{comment.id}"}
	.commentCurrent
		.commentMain
			.commentMainTop
				- if comment.user != nil
					.commentUserPic
						=image_tag comment.user.avatar.url(:thumb), :class => "commentUserThumb"
					%p
						=link_to comment.user.username, comment.user, :class => "commentUserName"
						commented:
				- else 
					%p [User Deleted]
			.commentMainContent
				%p= comment.comment
			.commentMainControls
				- if user_signed_in?
					
					= link_to "Reply", new_polymorphic_path([@commentable, Comment.new], :parent_id => comment, :id => @commentable), remote: true, :class => "replyLink btn btn-s btn-orange"
					- if comment.user != nil
						- if current_user.id == comment.user_id
							=link_to "Delete", [@commentable, comment] , method: :delete, remote: true, :data => { confirm: 'Delete Comment?',
																																										  'confirm-button-text': 'Delete',
																																										  'cancel-button-text': 'Cancel',
																																										  'confirm-button-color': '#ec8c25',
																																										  'cancel-button-color': '#151515',
																																										  'sweet-alert-type': 'warning'}, :class => "btn btn-s btn-dark btn-delete deleteLink"
		.commentVoting
			.voteSection.commentVoteSection
				.vote
					= link_to like_comment_path(comment), method: :put, remote: true do
						= image_tag "up.png", :class => "arrow"
				.voteCount
					- @voteCount = (comment.get_upvotes.size) - (comment.get_downvotes.size)
					%p.commentVotes= @voteCount
				.vote	
					= link_to dislike_comment_path(comment), method: :put, remote: true do
						= image_tag "down.png", :class => "arrow"
	.commentReply
		= nested_comments comment.children
