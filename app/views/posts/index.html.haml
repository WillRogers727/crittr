.mainBody
	= render partial: 'layouts/sidebar', locals: { section: 2 } # 2 for posts
	.gallery
		.galleryTopbar
			.titleSubmit
				.titleAndSub
					%h1.forumTitle
						=@category.name
						Posts
					- if @tagPresent 
						%p.tagTitle
							Filtered by Tag: 
							= @tagName
				.submitButton
					- if user_signed_in?
						= link_to "Submit", new_category_post_path, :class => "btn btn-m btn-orange"
			.searchForm
				= search_form_for [@category, @search], :class => "searchBar" do |f|
					.searchInput
						= f.search_field :title_cont
					= f.submit 'Search', :class => "btn btn-m btn-light"
		- if @posts.size == 0
			%p.noPosts No posts found...Try searching again!
		- else
			- @posts.each do |post|
				.postContainer
					.postThumbLeft
						.leftInner
							.leftUpper.leftSection
								%h2.title= link_to post.title, post
							.leftLower.leftSection
								%p
									- if post.category_id == nil
										Uncategorized
									- else 
										= Category.find(post.category_id).name
								%p
									Tags: 
									= raw post.tag_list.map { |t| link_to t, category_post_tag_path(post.category_id, t), :class => "tagLink"}.join(', ')
								- if post.nsfw == true
									%p.nsfw NSFW
								- if post.completed == true
									%p.answered Answered
								- else
									%p.unanswered Unanswered
								

						.voteSection.postVoteSection	
							.vote
								= link_to like_post_path(post), method: :put, remote: true do
									- if user_signed_in?
										- if current_user.voted_up_on? post
											.triangle.arrow.voted
										-else
											.triangle.arrow
							.voteCount
								%p.postVotes= @voteCount = (post.get_upvotes.size) - (post.get_downvotes.size)
							.vote
								= link_to dislike_post_path(post), method: :put, remote: true do
									- if user_signed_in?
										- if current_user.voted_down_on? post
											.triangle.triDown.arrow.voted
										- else
											.triangle.triDown.arrow
					.postThumbRight
						- if post.user != nil
							.userThumb
								=image_tag post.user.avatar.url(:thumb), :class => "artUserThumb"
								=link_to post.user.username, post.user, :class => "artUserName"
						-else
							%p [User Deleted]		
						%p.date
							Posted
							= time_ago_in_words(post.created_at)
							ago
		= will_paginate @posts, inner_window: 1, outer_window: 0