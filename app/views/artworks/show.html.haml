.titleSection.sixtySection
	%h1.threadTitle= @artwork.title
.artImageSection
	.artImageGallery
		- unless @pictures.empty?
			- c = 1 #counter to assign class names to images
			- @pictures.each do |pic|
				.artImage{class: "hidden image-" + c.to_s}
					.artImageHolder
						= image_tag pic.image.url
						- c+=1 #add one to counter per loop
						
						- unless pic.notes.size == 0
							- pic.notes.each do |note|
								= image_tag note.noteImg.url, :class => "noteImage hiddenNote noteImg-" + note.id.to_s
						
					- if user_signed_in?
						.artImageControls
							- if @artwork.user.id == current_user.id
								- unless @pictures.size == 1 #if there is only one picture, dont show the delete list
									= link_to "Delete Image", picture_path(pic.id), :data => { :confirm => "Are you sure?"}, :method => :delete, :class => "btn btn-s btn-light"
							= link_to "New Note", new_picture_note_path(pic.id), :class => "btn btn-s btn-orange"
					
					.noteSection
						%a.contentToggle.NoteToggle
							%h2 Notes
							=image_tag "toggleDown.png", :class => "toggleArrow"  
						.noteContent
							- if pic.notes.size != 0
								- pic.notes.each do |note|
									.note
										%p= note.content
										%p
											Posted by:
											= note.user.username
										%a.noteShow.btn.btn-s.btn-orange{id: "nShow-" + note.id.to_s, name: note.id.to_s } View note
										%a.noteHide.btn.btn-s.btn-orange.hiddenBtn{id: "nHide-" + note.id.to_s, name: note.id.to_s } Hide Note
										- if user_signed_in? && current_user.id == note.user_id
											=link_to "Delete Note", note , method: :delete, :remote => true, data: {confirm: "Are you sure you want to do this?"}, :class => "btn btn-s btn-dark"	
							- else
								%p No notes yet - Be the first to add one

	.artToggles
		- i = 1 # counter to assign class names to toggles
		- unless @pictures.size <= 1
			- while (i <= @pictures.size) do
				%label.tContainer 
					Image
					= i.to_s
					%input{:type => "radio", :name => "artToggle", :checked => "", :class => "artToggle", :value => i.to_s}
				- i+=1 #add one to counter per loop


.descriptionSection.sixtySection
	.descTop
		.descInfo.descSection
			%p
				Category:
				- if @artwork.category_id == nil
					Uncategorized
				- else 
					= Category.find(@artwork.category_id).name
			%p
				Tags: 
				= @artwork.tag_list

			- if @artwork.completed == true
				%p.answered Completed
			- else
				%p.unanswered In Progress
		.descVoting.descSection
			.voteSection	
				.vote
					= link_to like_artwork_path(@artwork), method: :put do
						= image_tag "up.svg", :class => "arrow"
				.voteCount
					- @voteCount = (@artwork.get_upvotes.size) - (@artwork.get_downvotes.size)
					%p= @voteCount
				.vote	
					= link_to dislike_artwork_path(@artwork), method: :put do
						= image_tag "down.svg", :class => "arrow"
	.descContent.descSection
		%p= @artwork.description
	.descControls.descSection
		- if user_signed_in?
			- if @artwork.user.id == current_user.id
				= link_to "Delete Artwork", artwork_path(@artwork), method: :delete, data: {confirm: "Are you sure you want to do this?"}, :class => "btn btn-m btn-dark"
				- if @artwork.completed != true
					= link_to "Set as Completed", set_completed_artwork_path(@artwork), remote: true, method: :put, :class => "btn btn-m btn-orange"
	
		

	


.addToggle.sixtySection
	%h3.commentHeader Add Images:
	=image_tag "toggleUpDark.png", :class => "darkToggleArrow" 
.addContent.sixtySection
	= render partial: "picture_form"

- if @artwork.completed == true
	.reviewToggle.sixtySection
		%h3.commentHeader Reviews
		=image_tag "toggleUpDark.png", :class => "darkToggleArrow"
	.reviewContent.sixtySection
		= render @artwork.reviews

		- if user_signed_in?
			%p Add a review now that this artwork is complete!
			.showForm
				= render 'reviews/form'

.commentToggle.sixtySection
	%h3.commentHeader Comments
	=image_tag "toggleUpDark.png", :class => "darkToggleArrow" 
.commentContent.sixtySection
	= nested_comments @comments
	- if user_signed_in?
		.showForm
			= render partial: "comments/form", locals: {commentable: @artwork}

	

