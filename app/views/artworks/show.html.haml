.backSection.sixtySection
	- @cat = Category.find(@artwork.category_id).name
	= link_to "Back to " + @cat, category_artworks_path(@artwork.category_id), :class => "btn btn-s btn-dark"
.titleSection.sixtySection
	%h1.threadTitle= @artwork.title
.artImageSection
	.artImageGallery
		- unless @pictures.empty?
		
			- c = 1 #counter to assign class names to images
			- @pictures.each do |pic|
				.artImage{class: "hidden image-" + c.to_s}
					.artImageHolder
						= image_tag pic.image.url
						- c+=1 #add one to counter per loop
						
						- unless pic.notes.size == 0
							- pic.notes.each do |note|
								= image_tag note.noteImg.url, :class => "noteImage hiddenNote noteImg-" + note.id.to_s
						
					- if user_signed_in?
						.artImageControls
							- if @artwork.user != nil
								- if @artwork.user.id == current_user.id
									- unless @pictures.size == 1 #if there is only one picture, dont show the delete list
										= link_to "Delete Image", picture_path(pic.id), :data => { confirm: 'Delete Image?',
																																										  'confirm-button-text': 'Delete',
																																										  'cancel-button-text': 'Cancel',
																																										  'confirm-button-color': '#ec8c25',
																																										  'cancel-button-color': '#151515',
																																										  'sweet-alert-type': 'warning'}, :method => :delete, :class => "btn btn-s btn-light"
								= link_to "New Note", new_picture_note_path(pic.id), :class => "btn btn-s btn-orange"
					
					.noteSection
						%a.contentToggle.NoteToggle
							%h2 Notes
							=image_tag "toggleDown.png", :class => "toggleArrow"  
						.noteContent
							- if pic.notes.size != 0
								- pic.notes.each do |note|
									.note
										.noteView
											%a.noteShow.btn.btn-s.btn-orange{id: "nShow-" + note.id.to_s, name: note.id.to_s } View note
											%a.noteHide.btn.btn-s.btn-orange.hiddenBtn{id: "nHide-" + note.id.to_s, name: note.id.to_s } Hide Note
										.noteLeft
											.noteUser
												- if note.user != nil
													.commentUserPic
														=image_tag note.user.avatar.url(:thumb), :class => "commentUserThumb"
													%p
														=link_to note.user.username, note.user, :class => "commentUserName"
														posted a note:
												- else 
													%p [User Deleted]
											.noteContent
												%p= note.content
											.noteControls
												- if note.user != nil
													- if user_signed_in? && current_user.id == note.user_id
														=link_to "Delete Note", note , method: :delete, :remote => true, :data => { confirm: 'Delete Note?',
																																										  'confirm-button-text': 'Delete',
																																										  'cancel-button-text': 'Cancel',
																																										  'confirm-button-color': '#ec8c25',
																																										  'cancel-button-color': '#151515',
																																										  'sweet-alert-type': 'warning'}, :class => "btn btn-s btn-dark"		
							- else
								%p.noNote No notes yet - Be the first to add one!

	.artToggles
		- i = 1 # counter to assign class names to toggles
		- unless @pictures.size <= 1
			%h2.toggleTitle Layer Toggles
			.toggleCont
				- while (i <= @pictures.size) do
					-if i == 1
						%label.tContainer.checkContainer
							%p.toggleNum= i.to_s
							%input{:type => "radio", :name => "artToggle", :checked => true, :class => "artToggle", :value => i.to_s}
							%span.checkmark.circleCheck
					-else 
						%label.tContainer.checkContainer
							%p.toggleNum= i.to_s
							%input{:type => "radio", :name => "artToggle", :checked => false, :class => "artToggle", :value => i.to_s}
							%span.checkmark.circleCheck
					- i+=1 #add one to counter per loop

.descriptionSection.sixtySection
	.descInfo.descSection
		%p
			- if @artwork.category_id == nil
				Uncategorized
			- else 
				=link_to @cat, category_artworks_path(@artwork.category_id), :class => "catLink"
		%p
			Tags: 
			= raw @artwork.tag_list.map { |t| link_to t, category_artwork_tag_path(@artwork.category_id, t), :class => "tagLink"}.join(', ')
		- if @artwork.completed == true
			%p.answered Completed
		- else
			%p.unanswered In Progress
		- if @artwork.nsfw == true
			%p.nsfw NSFW
	.descContent.descSection
		%p= @artwork.description
	.descTop
		.descUser.descSection
			- if @artwork.user != nil
				.userThumb
					=image_tag @artwork.user.avatar.url(:thumb), :class => "artUserThumb"
					=link_to @artwork.user.username, @artwork.user, :class => "artUserName"
			- else
				%p [User Deleted]
		.descVoting.descSection
			.voteSection.artVoteSection	
				.vote
					= link_to like_artwork_path(@artwork), method: :put, remote: true do
						- if user_signed_in?
							- if current_user.voted_up_on? @artwork
								.triangle.arrow.voted
							-else
								.triangle.arrow
				.voteCount
					%p.artVotes= @voteCount = (@artwork.get_upvotes.size) - (@artwork.get_downvotes.size)
				.vote
					= link_to dislike_artwork_path(@artwork), method: :put, remote: true do
						- if user_signed_in?
							- if current_user.voted_down_on? @artwork
								.triangle.triDown.arrow.voted
							- else
								.triangle.triDown.arrow
	.descDate.descSection
		%p.date
			Posted
			= time_ago_in_words(@artwork.created_at)
			ago
		.descSocial
			.sIcon.facebookIcon
				= facebook_button :turbolinks => true, :app_id => '2095083210778655', :static_link => true, :share => true
			.sIcon.twitterIcon
				= twitter_button :turbolinks => true, :title=> 'Crittr - ' + @artwork.title,  :hashtags => "Crittr", :static_link => true
			.sIcon.redditIcon	
				= reddit_button :turbolinks => true, :title=> 'Crittr - ' + @artwork.title , :static_link => true
	.descControls.descSection
		- if user_signed_in?
			- if @artwork.user != nil
				- if @artwork.user.id == current_user.id
					= link_to "Delete Artwork", artwork_path(@artwork), method: :delete, :data => { confirm: 'Delete Artwork Post?',
																																										  'confirm-button-text': 'Delete',
																																										  'cancel-button-text': 'Cancel',
																																										  'confirm-button-color': '#ec8c25',
																																										  'cancel-button-color': '#151515',
																																										  'sweet-alert-type': 'warning'}, :class => "btn btn-m btn-dark"
					- if @artwork.completed != true
						= link_to "Set as Completed", set_completed_artwork_path(@artwork), remote: true, method: :put, :data => { confirm: 'Set as Completed?',
																																										  'confirm-button-text': 'Yes',
																																										  'cancel-button-text': 'No',
																																										  'confirm-button-color': '#ec8c25',
																																										  'cancel-button-color': '#151515',
																																										  text: 'If your artwork is finished, select yes',
																																										  'sweet-alert-type': 'info'}, :class => "btn btn-m btn-orange"
		

- if user_signed_in?
	- if @artwork.user != nil
		- if @artwork.user.id == current_user.id
			- if @artwork.completed != true
				.addToggle.sixtySection
					%h3.commentHeader Add Images:
					=image_tag "toggleUpDark.png", :class => "darkToggleArrow" 
				.addContent.sixtySection
					%p.imageInstruction Once you have made improvements to your piece, add updated images to show what you have changed and receive more feedback!
					= render partial: "picture_form"

- if @artwork.completed == true
	.reviewToggle.sixtySection
		%h3.commentHeader Reviews
		=image_tag "toggleUpDark.png", :class => "darkToggleArrow"
	.reviewShrinkSection
		.reviewContentSection.sixtySection
			- if @artwork.reviews.size == 0
				- if user_signed_in?
					- if @artwork.user.id != current_user.id
						%p.noReviews No Reviews yet.. be the first to add one!
					- else
						%p.noReviews No Reviews yet.. be the first to add one!
			-else
				= render @artwork.reviews
		.reviewForm.sixtySection
			- if user_signed_in?
				- if @artwork.user.id != current_user.id
					%p Add a review now that this artwork is complete!
					.showForm
						= render partial: 'reviews/form'
			- else
				%p Sign in to add a review!

.commentToggle.sixtySection
	%h3.commentHeader Comments
	=image_tag "toggleUpDark.png", :class => "darkToggleArrow" 
.commentShrinkSection
	.commentContent.sixtySection
		- if @comments.size == 0
			%p.noComments No Comments yet.. be the first to add one!
		-else	
			= nested_comments @comments	
	.commentFormSection.sixtySection
		- if user_signed_in?
			.showForm
				= render partial: "comments/form", locals: {commentable: @artwork}
		- else
			%p Sign in to comment	


%script{type: "text/javascript"}
	:plain
		$(document).ready(function() {
	
		var activeHolder;
		var activeImage;

		$("body").on("click", ".replyLink", function() {
			$('.commentReplyForm').remove(); //remove forms
			$('.activeReply').show(); //show link again
			$('.replyLink.activeReply').removeClass('activeReply'); //remove active reply from any links with it currently on
			$(this).addClass('activeReply');
			$('.commentMainControls').removeClass('replyFormActive'); //remove reply form styling
		});

		$("body").on("click", ".artVoteSection", function() {
			$('.activeVote').removeClass('activeVote');
			$('.artVotes', this).addClass('activeVote');
		});

		$("body").on("click", ".vote a", function() {
			$('.activeVoteArrows').removeClass('activeVoteArrows');
			$(this).closest('.voteSection').addClass('activeVoteArrows');
			$('.activeVoteArrows .vote .arrow').removeClass('voted');
			$('.arrow', this).addClass('voted');
		});

		$("body").on("click", ".review", function() {
			$('.activeApprove').removeClass('activeApprove');
			$(this).addClass('activeApprove');
		});

		$("body").on("click", ".commentVoteSection", function() {
			$('.activeVote').removeClass('activeVote');
			$('.commentVotes', this).addClass('activeVote');
		});


		$('.commentFormSection .commentSubmit').click(function() {
			// alert("main form clicked");
			//set the active reply zone to be inside comment content
			$('.commentContent').addClass('activeCommentReplySection'); //set active reply section to the main feed of comments
			$('.commentMainControls').removeClass('replyFormActive'); //remove reply form styling
		});

		$('.fileInput').change(function(){
				if ($(this).val()) {
					$('.imageSubmit').attr('disabled',false); 
					$('.imageSubmit').removeClass('btn-disabled'); 
				}
			});

		//button on new comment form is only enabled when the text area contains a character
		$('.commentInput textarea').keyup(function() {
			textLength = $('.commentInput textarea').val().length;
			if (textLength > 0) {
				//button is enabled
				$('.commentSubmitBtn input').attr('disabled',false); 
				$('.commentSubmitBtn input').removeClass('btn-disabled')
			} else {
				//button is disabled
				$('.commentSubmitBtn input').attr('disabled',true); 
				$('.commentSubmitBtn input').addClass('btn-disabled')
			}
		});


		//button on review form is only enabled when the text area contains more than 100 chars
		$('.reviewInput textarea').keyup(function() {
			textLength = $('.reviewInput textarea').val().length;
			if (textLength >= 100) {
				//button is enabled
				$('.reviewSubmitBtn input').attr('disabled',false); 
				$('.reviewSubmitBtn input').removeClass('btn-disabled')
			} else {
				//button is disabled
				$('.reviewSubmitBtn input').attr('disabled',true); 
				$('.reviewSubmitBtn input').addClass('btn-disabled')
			}
		});




		$('.facebookIcon a').empty();
		$('.twitterIcon a').empty();
		$('.redditIcon a').empty();
		$('.facebookIcon a').append("<img class='socialIcon' src='/assets/facebook.png'></img>");
		$('.twitterIcon a').append("<img class='socialIcon' src='/assets/twitter.png'></img>");
		$('.redditIcon a').append("<img class='socialIcon' src='/assets/reddit.png'></img>");

		$('.image-1').addClass('visible');
		$('.image-1').removeClass('hidden');

		$("input:radio[name=artToggle][disabled=false]:first").attr('checked', true);
		
		//images are toggled
		$('.artToggle').change(function() {
				var num = this.value;
				var imgClass = "image-"+num;
				$('.artImage').removeClass('visible');
				$('.artImage').addClass('hidden');
				$('.'+imgClass).addClass('visible');
				$('.'+imgClass).removeClass('hidden');
				image = $('.'+imgClass+' > .artImageHolder img');
				holder = $('.'+imgClass+' > .artImageHolder');

				getActiveImage();
				setHolderHeight();
		});

		//need to make the art holder height the same as the image inside it
		//when - 
		//page is first loaded
		getActiveImage();
		setHolderHeight();
		//window is resized
		$(window).resize(function () { 
		  getActiveImage();
			setHolderHeight();
		});

		//function to get current active image and therefore holder
		function getActiveImage() {
			activeImage = document.querySelector('.visible .artImageHolder img');
			activeHolder = document.querySelector('.visible .artImageHolder');
		}
		//function to set the size
		function setHolderHeight() {
			var h = $(activeImage).height();
			activeHolder.style.height = h + 'px';
			activeHolder.height = activeHolder.offsetHeight;
		}

		$('.noteShow').click(function() {
			var val = this.name;
			showNote(val);
		});

		$('.noteHide').click(function() {
			var val = this.name;
			hideNote(val);
		});


		function showNote(val) {
			$('.noteImg-' + val).removeClass('hiddenNote');
			$('#nShow-' + val).addClass('hiddenBtn');
			$('#nHide-' + val).removeClass('hiddenBtn');
		}

		function hideNote(val) {
			$('.noteImg-' + val).addClass('hiddenNote');
			$('#nHide-' + val).addClass('hiddenBtn');
			$('#nShow-' + val).removeClass('hiddenBtn');

		}

		$("a.contentToggle.NoteToggle").on('click', function () {
			// alert("toggle clicked");
		  $('div.noteContent').slideToggle(200).toggleClass('contentActive');
		  $("a.contentToggle.NoteToggle > .toggleArrow").toggleClass('toggleArrowActive');
		});

		$(".commentToggle").on('click', function () {
			// alert("toggle clicked");
		  $('div.commentShrinkSection').slideToggle(200).toggleClass('contentActive');
		  $(".commentToggle > .darkToggleArrow").toggleClass('toggleArrowActive');
		});

		$(".reviewToggle").on('click', function () {
			// alert("toggle clicked");
		  $('div.reviewShrinkSection').slideToggle(200).toggleClass('contentActive');
		  $(".reviewToggle > .darkToggleArrow").toggleClass('toggleArrowActive');
		});

		$(".addToggle").on('click', function () {
			// alert("toggle clicked");
		  $('div.addContent').slideToggle(200).toggleClass('contentActive');
		  $(".addToggle > .darkToggleArrow").toggleClass('toggleArrowActive');
		});
		});
